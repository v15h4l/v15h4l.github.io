{"version":3,"sources":["index.js"],"names":["Square","props","className","isWinningSquare","onClick","value","Board","squareIdx","arr","map","i","squares","winningSquares","indexOf","renderSquare","Game","handleSquareClick","activeHistoryIdx","state","history","slice","xIsNext","calculateWinStatus","push","setState","handleButtonClick","Array","fill","status","this","winStatus","winner","some","sqr","calculateDraw","element","idx","React","Component","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"mOAKA,SAASA,EAAOC,GACZ,OACI,wBAAQC,UAAW,WAAaD,EAAME,iBAAmB,WAAYC,QAASH,EAAMG,QAApF,SACKH,EAAMI,QAKnB,SAASC,EAAML,GAEX,IAQIM,EAAY,EACZC,EAAM,CAAC,EAAG,EAAG,GACjB,OACI,8BAEQA,EAAIC,KAAI,SAAAC,GACJ,OACI,qBAAKR,UAAU,YAAf,SACMM,EAAIC,KAAI,SAAAC,GAAC,OAhBd,SAACA,GAAO,IAAD,EACxB,OAAO,cAACV,EAAD,CACHK,MAAOJ,EAAMU,QAAQD,GACrBP,iBAAiB,UAAAF,EAAMW,sBAAN,eAAsBC,QAAQH,KAAM,EACrDN,QAAS,kBAAMH,EAAMG,QAAQM,MAYEI,CAAaP,e,IASlDQ,E,kDACF,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IAQVe,kBAAoB,SAACN,GACjB,IAAIO,EAAmB,EAAKC,MAAMD,iBAC5BE,EAAU,EAAKD,MAAMC,QAAQC,MAAM,EAAGH,EAAmB,GACzDN,EAAUQ,EAAQF,GAAkBN,QAAQS,QAC5CC,EAAUF,EAAQF,GAAkBI,QAEtCC,EAAmBX,IAAYA,EAAQD,KAG3CC,EAAQD,GAAKW,EAAU,IAAM,IAE7BJ,IACAE,EAAQI,KAAK,CAAEZ,UAASU,SAAUA,IAClC,EAAKG,SAAS,CAAEL,UAASF,uBAtBV,EAyBnBQ,kBAAoB,SAACf,GACjB,EAAKc,SAAS,CAAEP,iBAAkBP,KAvBlC,EAAKQ,MAAQ,CACTC,QAAS,CAAC,CAAER,QAASe,MAAM,GAAGC,KAAK,MAAON,SAAS,IACnDJ,iBAAmB,GALR,E,qDA6BT,IAIFW,EAAQhB,EAJP,SACWiB,KAAKX,MAAMC,QAAQC,QACES,KAAKX,MAAMD,kBAAxCN,EAFH,EAEGA,QAASU,EAFZ,EAEYA,QAGXS,EAAYR,EAAmBX,GAWrC,OATImB,GACAF,EAAS,YAAcE,EAAUC,OACjCnB,EAAiBkB,EAAUlB,eAAeQ,SAI1CQ,EA+CZ,SAAuBjB,GACnB,OAAQA,EAAQqB,MAAM,SAAAC,GAAG,OAAKA,KAnDfC,CAAcvB,GACZ,cAEA,kBAAoBU,EAAU,IAAM,KAI7C,sBAAKnB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACI,EAAD,CAAOK,QAASA,EAASC,eAAgBA,EAAgBR,QAASyB,KAAKb,sBAE3E,sBAAKd,UAAU,YAAf,UACI,qBAAKA,UAAU,SAAf,SAAyB0B,IACzB,6BAEQC,KAAKX,MAAMC,QAAQV,KAAI,SAAC0B,EAASC,GAC7B,OAAQ,6BACJ,wBAAQlC,UAAW,aAAekC,IAAQ,EAAKlB,MAAMD,kBAAoB,UAAqBb,QAAS,kBAAI,EAAKqB,kBAAkBW,IAAlI,yBACcA,EAAM,EAAI,SAAWA,EAAM,eADgDA,oB,GAzD1GC,IAAMC,WAsEzB,SAAShB,EAAmBX,GAWxB,IAVA,IAAM4B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF7B,EAAI,EAAGA,EAAI6B,EAAMC,OAAQ9B,IAAK,CAAC,IAAD,cACjB6B,EAAM7B,GADW,GAC5B+B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ8B,KAAO9B,EAAQgC,GAClE,MAAO,CAAEZ,OAAQpB,EAAQ8B,GAAI7B,eAAgB,CAAC6B,EAAGC,EAAGC,IAG5D,OAAO,KASXC,IAASC,OACL,cAAC9B,EAAD,IACA+B,SAASC,eAAe,U","file":"static/js/main.994985d9.chunk.js","sourcesContent":["import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={\"square \" + (props.isWinningSquare && \"winning\")} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction Board(props) {\r\n\r\n    const renderSquare = (i) => {\r\n        return <Square\r\n            value={props.squares[i]}\r\n            isWinningSquare={props.winningSquares?.indexOf(i) >= 0}\r\n            onClick={() => props.onClick(i)}\r\n        />;\r\n    }\r\n\r\n    let squareIdx = 0;\r\n    let arr = [1, 2, 3];\r\n    return (\r\n        <div>\r\n            {\r\n                arr.map(i => {\r\n                    return (\r\n                        <div className=\"board-row\">\r\n                            { arr.map(i => renderSquare(squareIdx++)) }\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            history: [{ squares: Array(9).fill(null), xIsNext: true }],\r\n            activeHistoryIdx : 0\r\n        };\r\n    }\r\n\r\n    handleSquareClick = (i) => {\r\n        let activeHistoryIdx = this.state.activeHistoryIdx;\r\n        const history = this.state.history.slice(0, activeHistoryIdx + 1);\r\n        const squares = history[activeHistoryIdx].squares.slice();\r\n        const xIsNext = history[activeHistoryIdx].xIsNext;\r\n\r\n        if (calculateWinStatus(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = xIsNext ? \"X\" : \"O\";\r\n\r\n        activeHistoryIdx++;\r\n        history.push({ squares, xIsNext: !xIsNext });\r\n        this.setState({ history, activeHistoryIdx });\r\n    };\r\n\r\n    handleButtonClick = (i) => {\r\n        this.setState({ activeHistoryIdx: i });\r\n    };\r\n\r\n    render() {\r\n        const history = this.state.history.slice();\r\n        const { squares, xIsNext } = history[this.state.activeHistoryIdx];\r\n\r\n        let status, winningSquares;\r\n        const winStatus = calculateWinStatus(squares);\r\n\r\n        if (winStatus) {\r\n            status = \"Winner : \" + winStatus.winner;\r\n            winningSquares = winStatus.winningSquares.slice();\r\n        } else if (calculateDraw(squares)) {\r\n            status = \"Match Drawn\";\r\n        } else {\r\n            status = \"Next player : \" + (xIsNext ? \"X\" : \"O\");\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board squares={squares} winningSquares={winningSquares} onClick={this.handleSquareClick} />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div className=\"status\">{status}</div>\r\n                    <ol>\r\n                        {\r\n                            this.state.history.map((element, idx) => {\r\n                                return (<li>\r\n                                    <button className={\"move-btn \" + (idx === this.state.activeHistoryIdx && \"active\")} key={idx} onClick={()=>this.handleButtonClick(idx)}>\r\n                                        {`Go to ${idx > 0 ? \"move #\" + idx : \"game start\"}`}\r\n                                    </button>\r\n                                </li>);\r\n                            })\r\n                        }\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinStatus(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return { winner: squares[a], winningSquares: [a, b, c] };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction calculateDraw(squares) {\r\n    return !squares.some( sqr => !sqr);\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}